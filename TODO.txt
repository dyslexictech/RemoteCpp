== TODO
- Document the settings available for RemoteCpp.
- Move/Rename seems not to be working.
- Index properly the possible ToggleFiles at ListFiles time.
- Use the file index to also follow includes.
- Index in a dict() the lookups for the toggle files.

- ListFiles could run automatically in the background every 5min.
- Add a diagnostics Command to point out which RemoteCpp commands work and don't work.
- Configure RemoteCpp to work properly on Windows.
- 'Refresh All' is definitely quirky and blocks the editor. Need to fix that.
- If you call "ListFiles" in a ListFiles view it should just call refresh.
- Make number of thread pool threads a config.
- Suggest a sublime.project with all the common settings the README.md.
- "Move" does not seem to work for non-cpp files.
- Improve error handling to always notify the user when the remote connection is broken.
- When displaying files from the index, display the quick option box when there are multiple options.
- Command to refresh current open file.
- Fix the internal state so the file list is indexed to the 'cwd'
- OnRefresh, if the RemoteFile is different from the local one notify the user and ask them if they want to proceed.
- Toggling Header/Implementation from 'c' or 'cpp' should go directly to 'h' without prompt.
- Reduce logging all over the place.
- Add Syntax highlighting for the Grep view.
- Add Syntax highlighting for the Build view.
- Add Syntax highlighting for the ListFiles view.



== Finished TODO tasks
X Add new setting to always run the build command from CWD instead of ROOT.
X Add auto-save before build.
X When a file is renamed/newed/deleted update directly the file list to match.
X Open multiple selected files.
X Implement singleton Grep.
X Run a remote 'ssh ls' command.
X Pull the output of the remote 'ls' and print it onto a newly opened readonly view.
X Wire the new readonly-view to click open the file under the cursor.
X ssh commands need to run in the background ThreadPool.
X Write a progress bar for background tasks.
X Catch the event to select a line in the ListFiles file.
X scp the remote file into the local system.
X Open the remote/local file in a new view.
X Wire up mouse cmd click to open the files.
X Event listener for saving files.
X Implement refreshing the cache.
X scp copy the local file up to the server again.
X Add settings to configure cwd, ssh, scp, ...
X Persist the internal state of the plugin and reload it at start time.
X Create sample C++ project to carry on development while offline.
X Goto includes in cpp files based in the file list.
X Jump between header and cpp based in the file list.
X Command to refresh all open local files.
X Adding setting for base path.
X Add is_enabled methods to the TextCommands.
X Allow remote building and pull output.
X Create file by typing the path. (opens if already exists)
X Open file by typing the path.
X Goto to error from inside the remote build file.
X Rename/move remote file.
X Implement grep'ing through the files for symbols.
X Jump into line in the file where the grep'ed symbol was.
X Refresh all files should work always.
X List files in current file's directory.
X BZip2 the Plugin's state file.
X Fix the bug where the PluginState is completely GC() at boot time.
X Change completely the state so it relies on the view.file_name().
X AppendLineListener needs to be buffered otherwise it kills Sublime.
X Delete remote file.
X Implement singleton ListFiles.
X Implement singleton Build.
X Document all comments in the settings file so they appear in Cmd+Shift+P.
X Write a proper README.md file.
X Create Command that opens the README.md file.
X Make sure RemoteCpp opens the README.md file the first time it's ran.
X Implement refresh current (for files and file lists).
X Implement refresh all (for files and file lists).
X Implement fast file open (with selection box).
X "RefreshAll" blocks Sublime until complete - run it in the background.
X In the BuildView, it should be able to jump into unit test failure locations.



== Random Notes

# Will disconnect after (ServerAliveCountMax * ServerAliveInterval) seconds.
ssh -L 8888:localhost:22 $DEV -o TCPKeepAlive=yes -o ServerAliveCountMax=1000000 -o ServerAliveInterval=86400 -o ControlPersist=4h -o ControlMaster=yes 'while true; do echo "=> [$(date)] Still Alive!!! :)" ; sleep 5s; done;'
  sleep 5